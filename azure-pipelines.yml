name: $(Build.BuildId)
pool: 'Rabo-Build-Azure-Windows-Preview'
variables:
  buildConfiguration: 'Release'
  version: 0.0.1.$(Build.BuildId)

steps:
- checkout: self
  clean: true
  
- task: fortifyvsts.hpe-security-fortify-vsts.build-task-fortify-sca.FortifySCA@1
  displayName: 'Fortify: local scan'
  inputs:
    applicationType: other
    buildToolOptions: '-dotnet-version 2.1'
    fortifyBuildId: test
    runFortifyClean: true

- script: |
    BIRTReportGenerator -template "DISA STIG" -source $(Build.ArtifactStagingDirectory)/sca_artifacts/test.fpr -output "$(Build.ArtifactStagingDirectory)/sca_artifacts/fortify.pdf" -format PDF -showSuppressed --Version "DISA STIG 3.9" -UseFortifyPriorityOrder
  displayName: 'Fortify: export PDF report'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/sca_artifacts' 
    artifactName: 'sca'

- task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
  displayName: 'SonarQube: Prepare analysis on SonarQube'
  inputs:
    SonarQube: 'SonarQube TEST On Prem - with Token'
    projectKey: TAS.SecurePipelineScanner

# inspired by: https://stackoverflow.com/a/46813196/129269
- script: |
    #!/bin/bash 2> nul
    
    :; set -o errexit
    :; function goto() { return $?; }
      
    dotnet tool install --global dotnet-sonarscanner | echo
    dotnet sonarscanner begin /key:"TAS.SecurePipelineScanner" || goto :error
    dotnet build --configuration $(buildConfiguration) || goto :error
    dotnet test --configuration $(buildConfiguration) --logger trx --filter "category!=integration" || goto :error
    dotnet sonarscanner end || goto :error
    dotnet publish ./Subscriptions.Console --configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)/ConsoleApps || goto :error
    dotnet pack --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:PackageVersion=$(version) || goto :error

    :error
  
    :; exit 0
    exit /b 0
  
    :error
    exit /b %errorlevel%
  displayName: 'Build, test & pack'

- task: SonarSource.sonarqube.291ed61f-1ee4-45d3-b1b0-bf822d9095ef.SonarQubePublish@4
  displayName: 'SonarQube: Publish Quality Gate Result'

- task: PublishBuildArtifacts@1
  displayName: publish console apps
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/ConsoleApps' 
    artifactName: 'ConsoleApps'

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: 'dotnet push'
  inputs:
    command: push
    publishVstsFeed: 'ea1adc59-f67e-40d5-8539-4c897a894647'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))